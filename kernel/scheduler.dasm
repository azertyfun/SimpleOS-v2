; --------------------------------------------
; Title:   scheduler
; Author:  azertyfun
; Date:    31-12-12
; Version: -
; --------------------------------------------

; ---------------------------------------
;  /!\ WARNING ! WARNING ! WARNING ! /!\
; ---------------------------------------
;
; Not tested yet, the result would be completely random and unknown.

:scheduler
	IFL [started_programs], 2
		SET PC, POP
	
	SET A, POP ;Backuping precedent PC adress in A
	SET [current_program_temp], POP ;Address of PC just when the clock triggered its interrupt
	
	SET PUSH, A ;Reseting precedent PC adress in PUSH
	
	SET A, [currentProgram]
	ADD A, started_programs
	SET [A], [current_program_temp] ;We put the precedent saved PC into its place in the array of programs
	
	SET A, [currentProgram]
	ADD A, started_programs_SP
	SET [A], SP                     ;Backuping the stack, too
	
	ADD [currentProgram], 1                    ;Unfrozing the next program
	IFG [currentProgram], [numberOfPrograms]   ;If there isn't next program in the array, unfrozing the first program. Remember that there is at least two programs because of the IFE at the first line...
		SET [currentProgram], 0
	IFE [currentProgram], [numberOfPrograms]
		SET [currentProgram], 0
	
	;Activating the next program
	SET A, [currentProgram]
	ADD A, started_programs_SP
	SET SP, [A]						;Setting SP to the SP saved in the array
	
	SET A, [currentProgram]
	ADD A, started_programs
	SET [current_program_temp], [A]
	SET PUSH, [current_program_temp]
	SET PUSH, A
	SET PC, POP
	
	
;;;FONCTION addProgram
;;;DESCRIPTION THE SCHEDULER ISN'T TESTED YET, USE AT YOUR OWN RISKS
;;;ARG B Adress of the program


:addProgram
	IFG [numberOfPrograms], 4 ;If too much programs started...
		SET PC, POP
	
	ADD [numberOFPrograms], 1
	SET A, [numberOfPrograms]
	ADD A, started_programs
	SET [A], B
	SET A, [numberOfPrograms]
	ADD A, started_programs_SP
	SET [A], SP ;NOT SURE FOR THE VALUE
	SET PC, POP